plugins {
  id 'signing'
  id 'java'
  id 'jacoco'
  id 'maven-publish'
}

apply from: 'config.gradle'

group "${config.organization.slug}.${config.project.group}"
version config.project.version

sourceCompatibility = config.project.jvm
targetCompatibility = config.project.jvm

final VERSIONS = [
  JACKSON : '2.9.8',
  JUNIT   : '5.4.2',
  GRADLE  : '5.4'
]

task sourceJar(type: Jar) {
  classifier "sources"
  from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier "javadoc"
  from javadoc.destinationDir
}

wrapper {
  gradleVersion = VERSIONS.GRADLE
}

repositories {
  mavenCentral()
}

test {
  useJUnitPlatform()
}

dependencies {
  implementation (
    [ group:  'com.fasterxml.jackson.core',
      name:   'jackson-databind',
      version: VERSIONS.JACKSON ],
    [ group:  'com.fasterxml.jackson.core',
      name:   'jackson-annotations',
      version: VERSIONS.JACKSON ]
  )

  testImplementation (
    [ group:   'org.junit.jupiter',
      name:    'junit-jupiter',
      version: VERSIONS.JUNIT ]
  )
}

jacocoTestReport {
  reports {
    xml.enabled true
    html.enabled false
  }
}

compileJava {
  inputs.property("moduleName", config.module.name)
  doFirst {
    options.compilerArgs = [
      '--module-path', classpath.asPath,
    ]
    classpath = files()
  }
}

compileTestJava {
  inputs.property("moduleName", config.module.name)
  doFirst {
    options.compilerArgs = [
      '--module-path', classpath.asPath,
      '--add-modules', 'org.junit.jupiter.api',
      '--add-reads', "${config.module.name}=org.junit.jupiter.api",
      '--patch-module', "${config.module.name}=" + files(sourceSets.test.java.srcDirs).asPath,
    ]
    classpath = files()
  }
}

test {
  inputs.property("moduleName", config.module.name)
  doFirst {
    jvmArgs = [
      '--module-path', classpath.asPath,
      '--add-modules', 'ALL-MODULE-PATH',
      '--add-reads', "${config.module.name}=org.junit.jupiter.api",
      '--add-reads', "${config.module.name}=org.junit.platform.commons",
      '--add-opens', "${config.module.name}/io.vulpine.lib.json.schema.v4.impl=org.junit.platform.commons",
      '--add-opens', "${config.module.name}/io.vulpine.lib.json.schema.v4=org.junit.platform.commons",
      '--patch-module', "${config.module.name}=" + files(sourceSets.test.java.outputDir).asPath,
    ]
    classpath = files()
  }
}

javadoc {
  inputs.property('moduleName', config.module.name)
  doFirst {
    options.addStringOption('-module-path', classpath.asPath)
  }
}

artifacts {
  archives sourceJar
  archives javadocJar
}

jacoco { toolVersion = "0.8.3" }

signing {
  useGpgCmd()
  sign configurations.archives
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      updatePom(pom)
      groupId "${config.organization.slug}.${config.project.group}"
      artifactId = config.archive.name
      version config.project.version

      from components.java

      // create the sign pom artifact
      pom.withXml {
        def pomFile = file("${project.buildDir}/generated-pom.xml")
        writeTo(pomFile)
        def pomAscFile = signing.sign(pomFile).signatureFiles[0]
        artifact(pomAscFile) {
          classifier = null
          extension = 'pom.asc'
        }
      }

      artifact(sourceJar) {
        classifier = 'sources'
      }

      artifact(javadocJar) {
        classifier = 'javadoc'
      }

      // create the signed artifacts
      project.tasks.signArchives.signatureFiles.each {
        artifact(it) {
          def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
          if (matcher.find()) {
            classifier = matcher.group(1)
          } else {
            classifier = null
          }
          extension = 'jar.asc'
        }
      }
    }
  }

  repositories {
    maven {
      url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
      credentials {
        username OSSRH_USERNAME
        password OSSRH_PASSWORD
      }
    }
  }
}

def updatePom(pom) {
  pom.withXml {
    def root = asNode()

    root.dependencies.removeAll { dep ->
      dep.scope == "test"
    }

    root.children().last() + {
      resolveStrategy = Closure.DELEGATE_FIRST

      name config.project.name
      description config.project.description
      url config.project.site
      inceptionYear '2019'

      organization {
        name config.organization.title
        url config.organization.site
      }

      issueManagement {
        system 'GitHub'
        url config.project.tracker
      }

      ciManagement {
        system 'Travis CI'
        url "https://travis-ci.org/${config.organization.key}"
      }

      scm {
        connection "scm:git:${config.project.vcs}"
        developerConnection "scm:git:${config.project.vcs}"
        tag 'master'
        url config.project.site
      }

      licenses {
        license {
          name config.license.name
          url config.license.url
          distribution 'repo'
        }
      }

      developers {
        developer {
          id config.developer.user
          name config.developer.name
          email config.developer.email
        }
      }
    }
  }
}

model {
  tasks.generatePomFileForMavenJavaPublication {
    destination = file("$buildDir/generated-pom.xml")
  }
  tasks.publishMavenJavaPublicationToMavenLocal {
    dependsOn project.tasks.signArchives
  }
  tasks.publishMavenJavaPublicationToMavenRepository {
    dependsOn project.tasks.signArchives
  }
}
