plugins {
  id 'java'
  id 'maven'
  id 'jacoco'
  id 'signing'
}

apply from: 'config.gradle'

group "${config.organization.slug}.${config.project.group}"
version config.project.version

sourceCompatibility = config.project.jvm
targetCompatibility = config.project.jvm

final VERSIONS = [
  JACKSON : '2.9.8',
  JUNIT   : '5.4.2',
  GRADLE  : '5.4'
]

task sourceJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadoc(overwrite: true, type: Javadoc) {
  source = sourceSets.main.allJava
  destinationDir = file("${project.projectDir}/docs/")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

wrapper {
  gradleVersion = VERSIONS.GRADLE
}

repositories {
  mavenCentral()
}

test {
  useJUnitPlatform()
}

dependencies {
  implementation (
    [ group:  'com.fasterxml.jackson.core',
      name:   'jackson-databind',
      version: VERSIONS.JACKSON ],
    [ group:  'com.fasterxml.jackson.core',
      name:   'jackson-annotations',
      version: VERSIONS.JACKSON ]
  )

  testImplementation (
    [ group:   'org.junit.jupiter',
      name:    'junit-jupiter',
      version: VERSIONS.JUNIT ]
  )
}

jacocoTestReport {
  reports {
    xml.enabled true
    html.enabled true
  }
}

artifacts {
  archives jar
  archives sourceJar
  archives javadocJar
}

jacoco {
  toolVersion = "0.8.3"
  reportsDir = file("$buildDir/customJacocoReportDir")
}

javadoc {
  source = sourceSets.main.allJava
}

signing {
  sign configurations.archives
}

uploadArchives {

  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository( url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/' ) {
        authentication( userName: OSSRH_USERNAME, password: OSSRH_PASSWORD )
      }

//      repository( url: 'https://oss.sonatype.org/content/repositories/snapshots/' ) {
//        authentication( userName: config.credentials.username, password: config.credentials.password )
//      }

      pom.project {
        name "${config.organization.slug}.${config.project.group}:${config.project.name}"
        packaging 'jar'
        description config.project.description
        url config.project.site

        inceptionYear '2019'

        organization {
          name config.organization.title
          url config.organization.site
        }

        issueManagement {
          system 'Issue Tracker'
          url config.project.tracker
        }

        ciManagement {
          system 'Travis CI'
          url "https://travis-ci.org/${config.organization.key}"
        }

        scm {
          connection "scm:git:${config.project.vcs}"
          developerConnection "scm:git:${config.project.vcs}"
          tag 'master'
          url config.project.site
        }

        licenses {
          license {
            name config.license.name
            url config.license.url
            distribution 'repo'
          }
        }

        developers {
          developer {
            id config.developer.user
            name config.developer.name
            email config.developer.email
          }
        }
      }
    }
  }
}

